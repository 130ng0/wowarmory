diff --git a/src/game/AchievementMgr.cpp b/src/game/AchievementMgr.cpp
index d32d951..fd7600c 100644
--- a/src/game/AchievementMgr.cpp
+++ b/src/game/AchievementMgr.cpp
@@ -1771,6 +1771,8 @@ void AchievementMgr::CompletedAchievement(AchievementEntry const* achievement)
     if(achievement->flags & ACHIEVEMENT_FLAG_COUNTER || m_completedAchievements.find(achievement->ID)!=m_completedAchievements.end())
         return;
 
+    /* WowArmory Feed Log */
+    GetPlayer()->WriteWowArmoryDatabaseLog(1, achievement->ID);
     SendAchievementEarned(achievement);
     CompletedAchievementData& ca =  m_completedAchievements[achievement->ID];
     ca.date = time(NULL);
diff --git a/src/game/BattleGround.cpp b/src/game/BattleGround.cpp
index eb6ba1b..77dffb8 100644
--- a/src/game/BattleGround.cpp
+++ b/src/game/BattleGround.cpp
@@ -723,6 +723,44 @@ void BattleGround::EndBattleGround(uint32 winner)
             DEBUG_LOG("--- Winner rating: %u, Loser rating: %u, Winner change: %u, Losser change: %u ---", winner_rating, loser_rating, winner_change, loser_change);
             SetArenaTeamRatingChangeForTeam(winner, winner_change);
             SetArenaTeamRatingChangeForTeam(GetOtherTeam(winner), loser_change);
+            /* WoWArmory */
+            uint32 maxChartID;
+            QueryResult *result = CharacterDatabase.PQuery("SELECT MAX(gameid) FROM armory_game_chart");
+            if(!result)
+                maxChartID = 0;
+            else
+            {
+                maxChartID = (*result)[0].GetUInt32();
+                delete result;
+            }
+            uint32 gameID = maxChartID+1;
+            for(BattleGroundScoreMap::const_iterator itr = m_PlayerScores.begin(); itr != m_PlayerScores.end(); ++itr)
+            {
+                Player *plr = sObjectMgr.GetPlayer(itr->first);
+                if (!plr)
+                    continue;
+                uint32 plTeamID = plr->GetArenaTeamId(winner_arena_team->GetSlot());
+                uint32 changeType;
+                uint32 resultRating;
+                uint32 resultTeamID;
+                if (plTeamID == winner_arena_team->GetId())
+                {
+                    changeType = 1; //win
+                    resultRating = winner_rating;
+                    resultTeamID = plTeamID;
+                }
+                else
+                {
+                    changeType = 2; //lose
+                    resultRating = loser_rating;
+                    resultTeamID = loser_arena_team->GetId();
+                }
+                std::ostringstream sql_query;
+                //                                                        gameid,              teamid,                     guid,                    changeType,             ratingChange,               teamRating,                  damageDone,                          deaths,                          healingDone,                           damageTaken,                           healingTaken,                         killingBlows,                      mapId,                 start,                   end
+                sql_query << "INSERT INTO armory_game_chart VALUES ('" << gameID << "', '" << resultTeamID << "', '" << plr->GetGUID() << "', '" << changeType << "', '" << winner_change << "', '" << resultRating << "', '" << itr->second->DamageDone << "', '" << itr->second->Deaths << "', '" << itr->second->HealingDone << "', '" << itr->second->DamageTaken << "', '" << itr->second->HealingTaken << "', '" << itr->second->KillingBlows << "', '" << m_MapId << "', '" << m_StartTime << "', '" << m_EndTime << "')";
+                CharacterDatabase.Execute(sql_query.str().c_str());
+            }
+            //* WoWArmory *//
         }
         else
         {
@@ -730,7 +768,6 @@ void BattleGround::EndBattleGround(uint32 winner)
             SetArenaTeamRatingChangeForTeam(HORDE, 0);
         }
     }
-
     for(BattleGroundPlayerMap::iterator itr = m_Players.begin(); itr != m_Players.end(); ++itr)
     {
         uint32 team = itr->second.Team;
@@ -1374,6 +1411,13 @@ void BattleGround::UpdatePlayerScore(Player *Source, uint32 type, uint32 value)
         case SCORE_HEALING_DONE:                            // Healing Done
             itr->second->HealingDone += value;
             break;
+        /* WoWArmory (arena game chart) */
+        case SCORE_DAMAGE_TAKEN:
+            itr->second->DamageTaken += value;              // Damage Taken
+            break;
+        case SCORE_HEALING_TAKEN:
+            itr->second->HealingTaken += value;             // Healing Taken
+            break;
         default:
             sLog.outError("BattleGround: Unknown player score type %u", type);
             break;
diff --git a/src/game/BattleGround.h b/src/game/BattleGround.h
index 32554e4..66c33aa 100644
--- a/src/game/BattleGround.h
+++ b/src/game/BattleGround.h
@@ -190,7 +190,10 @@ enum ScoreType
     SCORE_GRAVEYARDS_DEFENDED   = 12,
     SCORE_TOWERS_ASSAULTED      = 13,
     SCORE_TOWERS_DEFENDED       = 14,
-    SCORE_SECONDARY_OBJECTIVES  = 15
+    SCORE_SECONDARY_OBJECTIVES  = 15,
+    /* WoWArmory */
+    SCORE_DAMAGE_TAKEN          = 16,
+    SCORE_HEALING_TAKEN         = 17
 };
 
 enum ArenaType
@@ -273,6 +276,8 @@ class BattleGroundScore
         uint32 BonusHonor;
         uint32 DamageDone;
         uint32 HealingDone;
+        uint32 DamageTaken;
+        uint32 HealingTaken;
 };
 
 /*
diff --git a/src/game/Item.cpp b/src/game/Item.cpp
index 1911968..0304b2c 100644
--- a/src/game/Item.cpp
+++ b/src/game/Item.cpp
@@ -950,7 +950,15 @@ Item* Item::CreateItem( uint32 item, uint32 count, Player const* player )
             count = pProto->GetMaxStackSize();
 
         ASSERT(count !=0 && "pProto->Stackable==0 but checked at loading already");
-
+        
+        if (pProto->Quality > 2 && pProto->Flags != 2048 && (pProto->Class == ITEM_CLASS_WEAPON || pProto->Class == ITEM_CLASS_ARMOR) && player)
+        {
+            /* WoWArmory Feed Log */
+            std::ostringstream ss;
+            sLog.outDetail("WoWArmory: write feed log (guid: %u, type: 2, data: %u)", player->GetGUIDLow(), item);
+            ss << "REPLACE INTO character_feed_log (guid, type, data, counter) VALUES (" << player->GetGUIDLow() << ", 2, " << item << ", 1)";
+            CharacterDatabase.PExecute( ss.str().c_str() );
+        }
         Item *pItem = NewItemOrBag( pProto );
         if( pItem->Create(sObjectMgr.GenerateLowGuid(HIGHGUID_ITEM), item, player) )
         {
diff --git a/src/game/Player.cpp b/src/game/Player.cpp
index 965345b..ec3ed8d 100644
--- a/src/game/Player.cpp
+++ b/src/game/Player.cpp
@@ -16636,6 +16636,17 @@ void Player::SaveToDB()
     outDebugStatsValues();
 
     CharacterDatabase.BeginTransaction();
+    
+    /* WoWArmory */
+    std::ostringstream ps;
+    ps << "REPLACE INTO armory_character_stats (guid,data) VALUES ('" << GetGUIDLow() << "', '";
+    for(uint16 i = 0; i < m_valuesCount; ++i )
+    {
+        ps << GetUInt32Value(i) << " ";
+    }
+    ps << "')";
+    CharacterDatabase.Execute( ps.str().c_str() );
+    /* WoWArmory */
 
     CharacterDatabase.PExecute("DELETE FROM characters WHERE guid = '%u'",GetGUIDLow());
 
@@ -22161,3 +22172,31 @@ void Player::SetRestType( RestType n_r_type, uint32 areaTriggerId /*= 0*/)
             SetFFAPvP(false);
     }
 }
+
+void Player::WriteWowArmoryDatabaseLog(uint32 type, uint32 data)
+{
+    uint32 pGuid = GetGUIDLow();
+    sLog.outDetail("WoWArmory: write feed log (guid: %u, type: %u, data: %u", pGuid, type, data);
+    if (type <= 0)	// Unknown type
+    {
+        sLog.outError("WoWArmory: unknown type id: %d, ignore.", type);
+        return;
+    }
+    if (type == 3)	// Do not write same bosses many times - just update counter.
+    {
+        QueryResult *result = CharacterDatabase.PQuery("SELECT counter FROM character_feed_log WHERE guid='%u' AND type=3 AND data='%u' LIMIT 1", pGuid, data);
+        if (result)
+        {
+            CharacterDatabase.PExecute("UPDATE character_feed_log SET counter=counter+1, date=NOW() WHERE guid='%u' AND type=3 AND data='%u' LIMIT 1", pGuid, data);
+        }
+        else
+        {
+            CharacterDatabase.PExecute("INSERT INTO character_feed_log (guid, type, data, counter) VALUES('%u', '%d', '%u', 1)", pGuid, type, data);
+        }
+        delete result;
+    }
+    else
+    {
+        CharacterDatabase.PExecute("REPLACE INTO character_feed_log (guid, type, data, counter) VALUES('%u', '%d', '%u', 1)", pGuid, type, data);
+    }
+}
\ No newline at end of file
diff --git a/src/game/Player.h b/src/game/Player.h
index 059aa2b..ac4a34a 100644
--- a/src/game/Player.h
+++ b/src/game/Player.h
@@ -2245,6 +2245,9 @@ class MANGOS_DLL_SPEC Player : public Unit
         bool TeleportToHomebind(uint32 options = 0) { return TeleportTo(m_homebindMapId, m_homebindX, m_homebindY, m_homebindZ, GetOrientation(), options); }
 
         Object* GetObjectByTypeMask(ObjectGuid guid, TypeMask typemask);
+        
+        /* WoWArmory Feed Log */
+        void WriteWowArmoryDatabaseLog(uint32 type, uint32 data);
 
         // currently visible objects at player client
         ObjectGuidSet m_clientGUIDs;
diff --git a/src/game/Unit.cpp b/src/game/Unit.cpp
index e3c0f05..de08505 100644
--- a/src/game/Unit.cpp
+++ b/src/game/Unit.cpp
@@ -641,6 +641,9 @@ uint32 Unit::DealDamage(Unit *pVictim, uint32 damage, CleanDamage const* cleanDa
             {
                 // FIXME: kept by compatibility. don't know in BG if the restriction apply.
                 bg->UpdatePlayerScore(killer, SCORE_DAMAGE_DONE, damage);
+                /* WoWArmory (arena game chart) */
+                if (BattleGround * bgV = ((Player*)pVictim)->GetBattleGround())
+                    bgV->UpdatePlayerScore(((Player*)pVictim), SCORE_DAMAGE_TAKEN, damage);
             }
         }
 
@@ -834,7 +837,10 @@ uint32 Unit::DealDamage(Unit *pVictim, uint32 damage, CleanDamage const* cleanDa
                     if (m->IsRaidOrHeroicDungeon())
                     {
                         if(cVictim->GetCreatureInfo()->flags_extra & CREATURE_FLAG_EXTRA_INSTANCE_BIND)
-                            ((InstanceMap *)m)->PermBindAllPlayers(creditedPlayer);
+                        {
+						    ((InstanceMap *)m)->PermBindAllPlayers(creditedPlayer);
+						    creditedPlayer->WriteWowArmoryDatabaseLog(3, cVictim->GetCreatureInfo()->Entry);
+						}
                     }
                     else
                     {
@@ -8852,6 +8858,10 @@ int32 Unit::DealHeal(Unit *pVictim, uint32 addhealth, SpellEntry const *spellPro
 
     if (pVictim->GetTypeId()==TYPEID_PLAYER)
     {
+        /* WoWArmory (arena game chart) */
+        if (BattleGround *bgV = ((Player*)pVictim)->GetBattleGround())
+            bgV->UpdatePlayerScore(((Player*)pVictim), SCORE_HEALING_TAKEN, gain);
+
         ((Player*)pVictim)->GetAchievementMgr().UpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_TOTAL_HEALING_RECEIVED, gain);
         ((Player*)pVictim)->GetAchievementMgr().UpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_HIGHEST_HEALING_RECEIVED, addhealth);
     }